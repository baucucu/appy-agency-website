name: CI/CD

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: Production

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x" # This follows the latest syntax for specifying versions

      # Set up Docker Buildx for multi-platform builds
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Check Docker Hub Credentials
        run: |
          if [ -z "${{ secrets.DOCKER_USERNAME }}" ]; then
            echo "DOCKER_USERNAME is not set"
            exit 1
          fi
          if [ -z "${{ secrets.DOCKER_TOKEN }}" ]; then
            echo "DOCKER_TOKEN is not set"
            exit 1
          fi
          echo "Docker Hub credentials are set"
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_TOKEN: ${{ secrets.DOCKER_TOKEN }}

      # Log in to Docker Hub using env for DOCKER credentials
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}
      - name: Login to Docker Hub
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_TOKEN }}
        run: |
          echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      # Build and push the Docker image
      - name: Build and push Docker image
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | head -c7)
          echo "Building image: ${{ secrets.DOCKER_USERNAME }}/appy-agency-website:$IMAGE_TAG"
          docker build -t "${{ secrets.DOCKER_USERNAME }}/appy-agency-website:$IMAGE_TAG" .
          docker push "${{ secrets.DOCKER_USERNAME }}/appy-agency-website:$IMAGE_TAG"

      # Deploy to VPS via SSH using Docker image
      - name: Deploy to VPS
        env:
          SSH_HOST: ${{ secrets.HOST }}
          SSH_USER: ${{ secrets.USERNAME }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          IMAGE_TAG=$(echo "${{ github.sha }}" | head -c7)
          echo "$SSH_PRIVATE_KEY" > deploy_key
          chmod 600 deploy_key
          ssh -v -i deploy_key -o StrictHostKeyChecking=no -o IdentitiesOnly=yes $SSH_USER@$SSH_HOST "
            docker pull $DOCKER_USERNAME/appy-agency-website:$IMAGE_TAG
            docker stop $DOCKER_USERNAME/appy-agency-website || true
            docker rm $DOCKER_USERNAME/appy-agency-website || true
            docker run -d --name $DOCKER_USERNAME/appy-agency-website -p 3000:3000 $DOCKER_USERNAME/appy-agency-website:$IMAGE_TAG
          "
      # Clean up the SSH key after deployment
      - name: Clean up
        run: shred -u deploy_key
